/***************************
File generated by shrinker.ch
DateTime: 2014-11-22, 11:02:33
File list:
	* http://threejs.org/examples/js/shaders/CopyShader.js
	* http://threejs.org/examples/js/shaders/DigitalGlitch.js
	* http://threejs.org/examples/js/postprocessing/EffectComposer.js
	* http://threejs.org/examples/js/postprocessing/RenderPass.js
	* http://threejs.org/examples/js/postprocessing/MaskPass.js
	* http://threejs.org/examples/js/postprocessing/ShaderPass.js
*****************************/
THREE.CopyShader={uniforms:{tDiffuse:{type:"t",value:null},opacity:{type:"f",value:1}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\ngl_FragColor = opacity * texel;\n}"};
THREE.DigitalGlitch={uniforms:{tDiffuse:{type:"t",value:null},tDisp:{type:"t",value:null},byp:{type:"i",value:0},amount:{type:"f",value:0.08},angle:{type:"f",value:0.02},seed:{type:"f",value:0.02},seed_x:{type:"f",value:0.02},seed_y:{type:"f",value:0.02},distortion_x:{type:"f",value:0.5},distortion_y:{type:"f",value:0.6},col_s:{type:"f",value:0.05}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform int byp;\nuniform sampler2D tDiffuse;\nuniform sampler2D tDisp;\nuniform float amount;\nuniform float angle;\nuniform float seed;\nuniform float seed_x;\nuniform float seed_y;\nuniform float distortion_x;\nuniform float distortion_y;\nuniform float col_s;\nvarying vec2 vUv;\nfloat rand(vec2 co){\nreturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main() {\nif(byp<1) {\nvec2 p = vUv;\nfloat xs = floor(gl_FragCoord.x / 0.5);\nfloat ys = floor(gl_FragCoord.y / 0.5);\nvec4 normal = texture2D (tDisp, p*seed*seed);\nif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\nif(seed_x>0.){\np.y = 1. - (p.y + distortion_y);\n}\nelse {\np.y = distortion_y;\n}\n}\nif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\nif(seed_y>0.){\np.x=distortion_x;\n}\nelse {\np.x = 1. - (p.x + distortion_x);\n}\n}\np.x+=normal.x*seed_x*(seed/5.);\np.y+=normal.y*seed_y*(seed/5.);\nvec2 offset = amount * vec2( cos(angle), sin(angle));\nvec4 cr = texture2D(tDiffuse, p + offset);\nvec4 cga = texture2D(tDiffuse, p);\nvec4 cb = texture2D(tDiffuse, p - offset);\ngl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\nvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\ngl_FragColor = gl_FragColor+ snow;\n}\nelse {\ngl_FragColor=texture2D (tDiffuse, vUv);\n}\n}"};
THREE.EffectComposer=function(a,c){this.renderer=a;if(c===undefined)c=new THREE.WebGLRenderTarget(window.innerWidth||1,window.innerHeight||1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:false});this.renderTarget1=c;this.renderTarget2=c.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.passes=[];THREE.CopyShader===undefined&&console.error("THREE.EffectComposer relies on THREE.CopyShader");this.copyPass=new THREE.ShaderPass(THREE.CopyShader)};
THREE.EffectComposer.prototype={swapBuffers:function(){var a=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=a},addPass:function(a){this.passes.push(a)},insertPass:function(a,c){this.passes.splice(c,0,a)},render:function(a){this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;var c=false,d,b,e=this.passes.length;for(b=0;b<e;b++){d=this.passes[b];if(d.enabled){d.render(this.renderer,this.writeBuffer,this.readBuffer,a,c);if(d.needsSwap){if(c){var f=this.renderer.context;
f.stencilFunc(f.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,a);f.stencilFunc(f.EQUAL,1,4294967295)}this.swapBuffers()}if(d instanceof THREE.MaskPass)c=true;else if(d instanceof THREE.ClearMaskPass)c=false}}},reset:function(a){if(a===undefined){a=this.renderTarget1.clone();a.width=window.innerWidth;a.height=window.innerHeight}this.renderTarget1=a;this.renderTarget2=a.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(a,
c){var d=this.renderTarget1.clone();d.width=a;d.height=c;this.reset(d)}};THREE.RenderPass=function(a,c,d,b,e){this.scene=a;this.camera=c;this.overrideMaterial=d;this.clearColor=b;this.clearAlpha=e!==undefined?e:1;this.oldClearColor=new THREE.Color;this.oldClearAlpha=1;this.clear=this.enabled=true;this.needsSwap=false};
THREE.RenderPass.prototype={render:function(a,c,d){this.scene.overrideMaterial=this.overrideMaterial;if(this.clearColor){this.oldClearColor.copy(a.getClearColor());this.oldClearAlpha=a.getClearAlpha();a.setClearColor(this.clearColor,this.clearAlpha)}a.render(this.scene,this.camera,d,this.clear);this.clearColor&&a.setClearColor(this.oldClearColor,this.oldClearAlpha);this.scene.overrideMaterial=null}};
THREE.MaskPass=function(a,c){this.scene=a;this.camera=c;this.clear=this.enabled=true;this.inverse=this.needsSwap=false};
THREE.MaskPass.prototype={render:function(a,c,d){var b=a.context;b.colorMask(false,false,false,false);b.depthMask(false);var e,f;if(this.inverse){e=0;f=1}else{e=1;f=0}b.enable(b.STENCIL_TEST);b.stencilOp(b.REPLACE,b.REPLACE,b.REPLACE);b.stencilFunc(b.ALWAYS,e,4294967295);b.clearStencil(f);a.render(this.scene,this.camera,d,this.clear);a.render(this.scene,this.camera,c,this.clear);b.colorMask(true,true,true,true);b.depthMask(true);b.stencilFunc(b.EQUAL,1,4294967295);b.stencilOp(b.KEEP,b.KEEP,b.KEEP)}};
THREE.ClearMaskPass=function(){this.enabled=true};THREE.ClearMaskPass.prototype={render:function(a){a=a.context;a.disable(a.STENCIL_TEST)}};
THREE.ShaderPass=function(a,c){this.textureID=c!==undefined?c:"tDiffuse";this.uniforms=THREE.UniformsUtils.clone(a.uniforms);this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader});this.renderToScreen=false;this.needsSwap=this.enabled=true;this.clear=false;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.scene.add(this.quad)};
THREE.ShaderPass.prototype={render:function(a,c,d){if(this.uniforms[this.textureID])this.uniforms[this.textureID].value=d;this.quad.material=this.material;this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,c,this.clear)}};
